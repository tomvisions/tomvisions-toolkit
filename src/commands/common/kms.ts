import { Role } from "@aws-sdk/client-iam";
import { KMSClient, CreateKeyCommand, ScheduleKeyDeletionCommand, KeyMetadata, ListKeysCommand, DescribeKeyCommand } from "@aws-sdk/client-kms";
import { logger } from "./";
const datetime = require('node-datetime');

class KMS {
    private _client: KMSClient;

    constructor() {
        const options = {
            version: "2014-11-01",
            region: "us-east-1"
        }

        this._client = new KMSClient(options);
    }

    /**
     * Creating a kms key
     * @returns Promise<KeyMetadata>
     */
    public async createkey(roleArn, accountId): Promise<KeyMetadata> {
        try {
            const policy = `{
                "Version": "2012-10-17",
                "Id": "custom-policy-${datetime.create().now()}",
                "Statement": [
                   {
                     "Sid": "Enable New IAM policies ${datetime.create().now()}",
                     "Effect": "Allow",
                     "Principal": {
                        "AWS": [
                            "arn:aws:iam::${accountId}:root",
                            "${roleArn}"
                        ]  
                     },
                     "Action": "*",
                     "Resource": "*"
                   }
                ]
            }`;

            const params = {
                Policy: policy,
                Description: "Key generated by Tomvisions Toolkit",

            };
            return (await this._client.send(new CreateKeyCommand(params))).KeyMetadata;
        } catch (error) {
            return error.toString();
        }
    }

    public async getListKeys() {
        console.log('inside list')
       return await this.listKeysCommand();
    }

    public async getKeyInfo(keyId) {
       return this.describeKeyCommand(keyId);
    }

    private async describeKeyCommand(keyId) {

        try {
            return (await this._client.send(new DescribeKeyCommand({KeyId:keyId })));
        } catch (error) {
            logger.logMessage(error.toString(), error, 'ERROR');
            return error.toString();
        }
    }

    private async listKeysCommand() {
        try {

           ///logger.logMessage('Getting the list of keys',null, 'INFO');
            console.log('gi')
            return (await this._client.send(new ListKeysCommand({})));
        } catch (error) {
            logger.logMessage(error.toString(), error, 'ERROR');
            return error.toString();
        }
    }
    async scheduleKeyDeletion(keyId) {
        try {
                console.log('about to delete')
    //        logger.logMessage('The following key has been scheduled for deletion', { KeyId: keyId }, 'INFO');
            const test =  await this._client.send(new ScheduleKeyDeletionCommand({ KeyId: keyId, PendingWindowInDays: 7 }));
                console.log('testing');
                console.log(test);
                return test;
        } catch (error) {
            logger.logMessage(error.toString(), error, 'ERROR');
            return error.toString();
        }
    }
    async cleanUpKey(keyId) {
   //     logger.logMessage('About to schedule KMS key deletion', {KeyId: keyId}, 'Key Delection');
        await this.scheduleKeyDeletion(keyId);
    }

    /**
     * 
     * @param roleInstance 
     */
    public async setupKey(roleInstance: Role, accountId: string) {
        const key: KeyMetadata = await this.createkey(roleInstance.Arn, accountId)
        logger.logMessage('Key has been created', { KeyId: key.KeyId }, 'INFO');

        return key;
    }
}

export const kms = new KMS();