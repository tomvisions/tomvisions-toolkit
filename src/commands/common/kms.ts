import { Role } from "@aws-sdk/client-iam";
import { KMSClient, CreateKeyCommand, KeyMetadata } from "@aws-sdk/client-kms";
const datetime = require('node-datetime');

class KMS {
    private _client: KMSClient;

    constructor() {
        const options = {
            version: "2014-11-01",
            region: "us-east-1"
        }

        this._client = new KMSClient(options);
    }

    /**
     * Creating a kms key
     * @returns Promise<KeyMetadata>
     */
    public async createkey(roleArn, accountId) : Promise<KeyMetadata>{
        try {
            const policy = `{
                "Version": "2012-10-17",
                "Id": "custom-policy-${datetime.create().now()}",
                "Statement": [
                   {
                     "Sid": "Enable New IAM policies ${datetime.create().now()}",
                     "Effect": "Allow",
                     "Principal": {
                        "AWS": [
                            "arn:aws:iam::${accountId}:root",
                            "${roleArn}"
                        ]  
                     },
                     "Action": "*",
                     "Resource": "*"
                   }
                ]
            }`;

            const params = {
                Policy: policy,
                Description: "Key generated by Tomvisions Toolkit",
              
            };
               return (await this._client.send(new CreateKeyCommand(params))).KeyMetadata;
        } catch (error) {
            return error.toString();
        }

    }

    /**
     * 
     * @param roleInstance 
     */
    public async setupKey(roleInstance: Role, accountId:string) {
        const key: KeyMetadata = await this.createkey(roleInstance.Arn,accountId)
    
        return key;
    }
}

export const kms = new KMS();